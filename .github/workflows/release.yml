name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v1.0.0 这样的标签时触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      asset: ${{ steps.upload-frontend.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: 'web/pnpm-lock.yaml'
          
      - name: Install and build frontend
        working-directory: ./web
        run: |
          pnpm install --no-frozen-lockfile
          pnpm build
          
      - name: Package frontend
        run: tar -czvf frontend.tar.gz -C web/dist .
        
      - name: Upload frontend artifact
        id: upload-frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-asset
          path: frontend.tar.gz
          retention-days: 1

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    # 🔧 优化：移除依赖，与前端并行构建
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
          # 🔧 优化：添加 Go 缓存
          cache: true
          cache-dependency-path: go.sum

      # 🔧 优化：添加 Go 模块缓存
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-
            ${{ runner.os }}-go-

      # 🔧 优化：缓存 musl 编译器
      - name: Cache musl compiler
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        uses: actions/cache@v4
        with:
          path: aarch64-linux-musl-cross
          key: musl-aarch64-2025-06-21

      - name: Setup musl.cc for ARM64
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        run: |
          if [ ! -d "aarch64-linux-musl-cross" ]; then
            wget https://github.com/WindyDante/musl-compilers/releases/download/2025-06-21/aarch64-linux-musl-cross.tgz
            tar -xf aarch64-linux-musl-cross.tgz
          fi
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Build backend binary
        run: |
          mkdir -p dist
          
          # 设置二进制文件名
          BINARY_NAME="clear"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="clear.exe"
          fi
          
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          
          # 🔧 简化：所有平台都使用 CGO_ENABLED=0
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -v -o dist/${BINARY_NAME} ./cmd/server/main.go
          
          # 检查构建结果
          if [ -f "dist/${BINARY_NAME}" ]; then
            echo "✅ Binary built successfully: dist/${BINARY_NAME}"
            ls -la dist/${BINARY_NAME}
            file dist/${BINARY_NAME}
          else
            echo "❌ Binary build failed"
            ls -la dist/
            exit 1
          fi

      - name: Package backend binary
        run: |
          echo "Files in dist before packaging:"
          ls -la dist/
          
          # 🔧 修复：在根目录操作，不要 cd 到 dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            if [ -f "dist/clear.exe" ]; then
              echo "Packaging Windows binary..."
              (cd dist && zip -r clear-${{ matrix.goos }}-${{ matrix.goarch }}.zip clear.exe)
              echo "✅ Created: dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
            else
              echo "❌ clear.exe not found"
              exit 1
            fi
          else
            if [ -f "dist/clear" ]; then
              echo "Packaging Unix binary..."
              (cd dist && tar -czvf clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz clear)
              echo "✅ Created: dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
            else
              echo "❌ clear binary not found"
              exit 1
            fi
          fi
          
          echo "Final files in dist:"
          ls -la dist/
          
          # 验证压缩文件
          echo "Checking packaged files:"
          ls -la dist/*.tar.gz dist/*.zip 2>/dev/null || echo "No archive files found"

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: clear-${{ matrix.goos }}-${{ matrix.goarch }}-asset
          # 🔧 修复：确保路径正确
          path: dist/*.tar.gz dist/*.zip
          retention-days: 1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-frontend, build-binaries]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          
          # 复制前端资源
          cp artifacts/frontend-asset/frontend.tar.gz release/
          
          # 复制所有后端二进制文件
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release/
          done
          
          # 复制配置文件
          cp -r config release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📦 下载说明
            - `frontend.tar.gz` - 前端静态文件
            - `clear-*-*.tar.gz` - 各平台后端二进制文件
            - `config/` - 配置文件
            
            ### 🐳 Docker 使用
            ```bash
            docker pull ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build-frontend, build-binaries]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 🔧 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare Docker context
        run: |
          echo "Preparing Docker build context..."
          
          # 验证下载的文件
          echo "Artifacts structure:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip"
          
          # 确保目录结构正确
          ls -la artifacts/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🔧 使用优化的 Dockerfile
      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.optimized  # 指定使用优化版本
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:${{ github.ref_name }}
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/clear:${{ github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max