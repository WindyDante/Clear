name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v1.0.0 这样的标签时触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      asset: ${{ steps.upload-frontend.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: 'web/pnpm-lock.yaml'
          
      - name: Install and build frontend
        working-directory: ./web
        run: |
          pnpm install --no-frozen-lockfile
          pnpm build
          
      - name: Package frontend
        run: tar -czvf frontend.tar.gz -C web/dist .
        
      - name: Upload frontend artifact
        id: upload-frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-asset
          path: frontend.tar.gz
          retention-days: 1

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    # 🔧 优化：移除依赖，与前端并行构建
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
          # 🔧 优化：添加 Go 缓存
          cache: true
          cache-dependency-path: go.sum

      # 🔧 优化：添加 Go 模块缓存
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-
            ${{ runner.os }}-go-

      # 🔧 优化：缓存 musl 编译器
      - name: Cache musl compiler
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        uses: actions/cache@v4
        with:
          path: aarch64-linux-musl-cross
          key: musl-aarch64-2025-06-21

      - name: Setup musl.cc for ARM64
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        run: |
          if [ ! -d "aarch64-linux-musl-cross" ]; then
            wget https://github.com/WindyDante/musl-compilers/releases/download/2025-06-21/aarch64-linux-musl-cross.tgz
            tar -xf aarch64-linux-musl-cross.tgz
          fi
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Build backend binary
        run: |
          mkdir -p dist
          
          # 设置二进制文件名
          BINARY_NAME="clear"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="clear.exe"
          fi
          
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          
          # 🔧 简化：所有平台都使用 CGO_ENABLED=0
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -v -o dist/${BINARY_NAME} ./cmd/server/main.go
          
          # 检查构建结果
          if [ -f "dist/${BINARY_NAME}" ]; then
            echo "✅ Binary built successfully: dist/${BINARY_NAME}"
            ls -la dist/${BINARY_NAME}
            file dist/${BINARY_NAME}
          else
            echo "❌ Binary build failed"
            ls -la dist/
            exit 1
          fi

      - name: Package backend binary
        run: |
          echo "Files in dist before packaging:"
          ls -la dist/
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            if [ -f "dist/clear.exe" ]; then
              echo "Packaging Windows binary..."
              (cd dist && zip -r clear-${{ matrix.goos }}-${{ matrix.goarch }}.zip clear.exe)
              echo "✅ Created: dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
            else
              echo "❌ clear.exe not found"
              exit 1
            fi
          else
            if [ -f "dist/clear" ]; then
              echo "Packaging Unix binary..."
              (cd dist && tar -czvf clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz clear)
              echo "✅ Created: dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
            else
              echo "❌ clear binary not found"
              exit 1
            fi
          fi
          
          echo "Final files in dist:"
          ls -la dist/
          
          # 🔧 详细验证压缩文件
          echo "Verifying archive files:"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ls -la dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          else
            ls -la dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          fi

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: clear-${{ matrix.goos }}-${{ matrix.goarch }}-asset
          # 🔧 修复：使用具体的文件路径，而不是通配符
          path: |
            dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
            dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          retention-days: 1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-frontend, build-binaries]
    steps:
      - uses: actions/checkout@v4

      # 🔧 添加缺失的环境变量
      - name: Set up environment variables
        run: |
          echo "REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          
          # 复制前端资源
          cp artifacts/frontend-asset/frontend.tar.gz release/
          
          # 复制所有后端二进制文件
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release/
          done
          
          if [ -f "config/config.yaml" ]; then
            mkdir -p tmp-config
            cp config/config.yaml tmp-config/
            tar -czvf release/config.tar.gz -C tmp-config config.yaml
            rm -rf tmp-config
            echo "✅ Config file (config.yaml) packaged"
          else
            echo "⚠️ config/config.yaml not found"
          fi
          
          echo "Release files:"
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # 🔧 使用输入的标签或 GitHub 自动标签
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          files: release/*
          body: |
            ## 🚀 Release ${{ github.event.inputs.tag || github.ref_name }}
            
            ### 📦 快速开始
            
            #### 🐳 Docker 部署（推荐）
            ```bash
            # Docker Hub (推荐)
            docker run -d \
              --name clear-app \
              -p 6277:6633 \
              -v $(pwd)/data:/app/data \
              -e JWT_SECRET="Welcome to Clear!" \
              ${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
            
            # 访问地址: http://localhost:6277
            ```
            
            #### 📁 二进制部署用户
            
            **所需文件：**
            - `frontend.tar.gz` - 前端静态文件
            - `clear-*-*.tar.gz` - 各平台后端二进制文件
            - `config.tar.gz` - 配置文件 (只包含 config.yaml)
            
            **部署步骤：**
            ```bash
            # 1. 创建应用目录
            mkdir clear-app && cd clear-app
            
            # 2. 下载对应平台的文件 (以 Linux AMD64 为例)
            wget https://github.com/${{ github.repository }}/releases/latest/download/clear-linux-amd64.tar.gz
            wget https://github.com/${{ github.repository }}/releases/latest/download/frontend.tar.gz
            wget https://github.com/${{ github.repository }}/releases/latest/download/config.tar.gz
            
            # 3. 解压所有文件
            tar -xzf clear-linux-amd64.tar.gz              # 解压二进制文件
            tar -xzf config.tar.gz                         # 解压配置文件 (config.yaml)
            mkdir -p template && tar -xzf frontend.tar.gz -C template/  # 解压前端文件
            
            # 4. 设置权限并启动
            chmod +x clear
            ./clear
            
            # 访问地址: http://localhost:6633 (默认端口)
            ```
            
            ### 🐳 Docker 使用详情
            
            #### Docker Hub (推荐)
            ```bash
            # 拉取镜像
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
            
            # 运行容器
            docker run -d \
              --name clear-app \
              --restart unless-stopped \
              -p 6277:6633 \
              -v $(pwd)/data:/app/data \
              -e JWT_SECRET="Welcome to Clear!" \
              ${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
            ```
            
            #### Docker Compose (推荐)
            ```yaml
            version: '3'
            services:
              clear:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
                container_name: clear
                ports:
                  - "6277:6633"
                volumes:
                  - ./data:/app/data
                environment:
                  - JWT_SECRET=Welcome to Clear!
                restart: unless-stopped
            ```
            
            #### GitHub Container Registry
            ```bash
            # 使用 GitHub 镜像
            docker run -d \
              --name clear-app \
              --restart unless-stopped \
              -p 6277:6633 \
              -v $(pwd)/data:/app/data \
              -e JWT_SECRET="Welcome to Clear!" \
              ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:latest
            ```
            
            ### 🔧 配置说明
            
            - **Docker 用户**: 
              - 配置通过环境变量设置 (如 `JWT_SECRET`)
              - 数据持久化通过卷挂载 `./data:/app/data`
              - 访问地址: http://localhost:6277
            
            - **二进制用户**: 
              - 下载 `config.tar.gz` 获取 `config.yaml` 配置文件
              - 可编辑 `config.yaml` 自定义配置
              - 默认访问地址: http://localhost:6633
            
            ### 📊 文件说明
            
            | 文件 | 大小 | 说明 |
            |------|------|------|
            | `frontend.tar.gz` | ~1.3MB | 前端静态文件 |
            | `clear-linux-amd64.tar.gz` | ~8.5MB | Linux AMD64 二进制 |
            | `clear-linux-arm64.tar.gz` | ~7.9MB | Linux ARM64 二进制 |
            | `clear-darwin-amd64.tar.gz` | ~8.4MB | macOS Intel 二进制 |
            | `clear-darwin-arm64.tar.gz` | ~7.9MB | macOS Apple Silicon 二进制 |
            | `clear-windows-amd64.zip` | ~8.7MB | Windows 二进制 |
            | `config.tar.gz` | <1KB | 配置文件 (config.yaml) |
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build-frontend, build-binaries]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 🔧 下载 Linux 构建产物（Docker 只需要 Linux）
      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: clear-linux-amd64-asset
          path: ./linux-amd64/

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: clear-linux-arm64-asset
          path: ./linux-arm64/

      - name: Download frontend assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-asset
          path: ./frontend/

      - name: Prepare Docker context
        run: |
          echo "Preparing Docker build context..."
          
          # 解压二进制文件到对应目录
          echo "Extracting AMD64 binary..."
          cd linux-amd64 && tar -xzf clear-linux-amd64.tar.gz && cd ..
          
          echo "Extracting ARM64 binary..."
          cd linux-arm64 && tar -xzf clear-linux-arm64.tar.gz && cd ..
          
          # 解压前端文件
          echo "Extracting frontend assets..."
          mkdir -p web/dist
          cd web/dist && tar -xzf ../../frontend/frontend.tar.gz && cd ../..
          
          # 验证文件
          echo "Verifying extracted files:"
          echo "AMD64 binary:"
          ls -la linux-amd64/
          echo "ARM64 binary:"
          ls -la linux-arm64/
          echo "Frontend files count:"
          ls -1 web/dist/ | wc -l

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.optimized  # 使用优化的 Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:${{ github.ref_name }}
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/clear:${{ github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max