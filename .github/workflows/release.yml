name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v1.0.0 这样的标签时触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      asset: ${{ steps.upload-frontend.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: 'web/pnpm-lock.yaml'
          
      - name: Install and build frontend
        working-directory: ./web
        run: |
          pnpm install --no-frozen-lockfile
          pnpm build
          
      - name: Package frontend
        run: tar -czvf frontend.tar.gz -C web/dist .
        
      - name: Upload frontend artifact
        id: upload-frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-asset
          path: frontend.tar.gz
          retention-days: 1

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-
            ${{ runner.os }}-go-

      - name: Cache musl compiler
        if: matrix.goarch == 'arm64'
        uses: actions/cache@v4
        with:
          path: aarch64-linux-musl-cross
          key: musl-aarch64-2025-06-21

      - name: Setup musl.cc for ARM64
        if: matrix.goarch == 'arm64'
        run: |
          if [ ! -d "aarch64-linux-musl-cross" ]; then
            wget https://github.com/WindyDante/musl-compilers/releases/download/2025-06-21/aarch64-linux-musl-cross.tgz
            tar -xf aarch64-linux-musl-cross.tgz
          fi
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Build backend binary
        run: |
          mkdir -p dist
          
          echo "Building for Linux ${{ matrix.goarch }}..."
          
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            # Linux ARM64: 使用 musl 编译器，启用 CGO
            echo "Building Linux ARM64 with CGO and musl..."
            CC=aarch64-linux-musl-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
            go build -v -ldflags "-linkmode external -extldflags '-static'" \
            -o dist/clear ./cmd/server/main.go
          else
            # Linux AMD64: 启用 CGO，静态链接
            echo "Building Linux AMD64 with CGO..."
            CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
            go build -v -ldflags "-linkmode external -extldflags '-static'" \
            -o dist/clear ./cmd/server/main.go
          fi
          
          # 检查构建结果
          if [ -f "dist/clear" ]; then
            echo "✅ Binary built successfully: dist/clear"
            ls -la dist/clear
            file dist/clear
          else
            echo "❌ Binary build failed"
            ls -la dist/
            exit 1
          fi

      - name: Package backend binary
        run: |
          echo "Files in dist before packaging:"
          ls -la dist/
          
          if [ -f "dist/clear" ]; then
            echo "Packaging Linux binary..."
            (cd dist && tar -czvf clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz clear)
            echo "✅ Created: dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
          else
            echo "❌ clear binary not found"
            exit 1
          fi
          
          echo "Final files in dist:"
          ls -la dist/

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: clear-${{ matrix.goos }}-${{ matrix.goarch }}-asset
          path: dist/clear-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          retention-days: 1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-frontend, build-binaries]
    steps:
      - uses: actions/checkout@v4

      # 🔧 添加缺失的环境变量
      - name: Set up environment variables
        run: |
          echo "REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          
          # 复制前端资源
          cp artifacts/frontend-asset/frontend.tar.gz release/
          
          # 🔧 修复：只复制 Linux 平台的二进制文件
          echo "Copying Linux binaries..."
          cp artifacts/clear-linux-amd64-asset/clear-linux-amd64.tar.gz release/
          cp artifacts/clear-linux-arm64-asset/clear-linux-arm64.tar.gz release/
          
          # 打包配置文件
          if [ -f "config/config.yaml" ]; then
            mkdir -p tmp-config
            cp config/config.yaml tmp-config/
            tar -czvf release/config.tar.gz -C tmp-config config.yaml
            rm -rf tmp-config
            echo "✅ Config file (config.yaml) packaged"
          else
            echo "⚠️ config/config.yaml not found"
          fi
          
          echo "Release files:"
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # 🔧 使用输入的标签或 GitHub 自动标签
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          files: release/*
          body: |
            ## 🚀 Clear ${{ github.event.inputs.tag || github.ref_name }}
            
            简洁高效的待办事项管理应用，支持 Linux 多架构部署。
            
            ### 🐳 Docker 部署（推荐）
            
            #### 方法一：Docker Compose
            ```bash
            # 下载并启动
            wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            docker-compose up -d
            
            # 访问地址: http://localhost:6277
            ```
            
            #### 方法二：Docker Run
            ```bash
            docker run -d \
              --name clear \
              -p 6277:6633 \
              -v $(pwd)/data:/app/data \
              -e JWT_SECRET="Welcome to Clear!" \
              ${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
            ```
            
            ### 🖥️ 二进制部署
            
            #### AMD64 服务器（Intel/AMD）
            ```bash
            mkdir clear-app && cd clear-app
            
            # 下载文件
            wget https://github.com/${{ github.repository }}/releases/latest/download/clear-linux-amd64.tar.gz
            wget https://github.com/${{ github.repository }}/releases/latest/download/frontend.tar.gz
            wget https://github.com/${{ github.repository }}/releases/latest/download/config.tar.gz
            
            # 解压启动
            tar -xzf clear-linux-amd64.tar.gz && tar -xzf config.tar.gz
            mkdir -p template && tar -xzf frontend.tar.gz -C template/
            chmod +x clear && ./clear
            
            # 访问地址: http://localhost:6633
            ```
            
            #### ARM64 服务器（树莓派等）
            ```bash
            mkdir clear-app && cd clear-app
            
            # 下载文件
            wget https://github.com/${{ github.repository }}/releases/latest/download/clear-linux-arm64.tar.gz
            wget https://github.com/${{ github.repository }}/releases/latest/download/frontend.tar.gz
            wget https://github.com/${{ github.repository }}/releases/latest/download/config.tar.gz
            
            # 解压启动
            tar -xzf clear-linux-arm64.tar.gz && tar -xzf config.tar.gz
            mkdir -p template && tar -xzf frontend.tar.gz -C template/
            chmod +x clear && ./clear
            
            # 访问地址: http://localhost:6633
            ```
            
            ### 📦 文件说明
            
            | 文件 | 大小 | 说明 |
            |------|------|------|
            | `clear-linux-amd64.tar.gz` | ~8MB | Intel/AMD 服务器二进制 |
            | `clear-linux-arm64.tar.gz` | ~8MB | ARM 服务器二进制（树莓派等） |
            | `frontend.tar.gz` | ~1MB | 前端静态文件 |
            | `config.tar.gz` | <1KB | 配置文件模板 |
            
            ### ✨ 特性
            
            - 🎨 简洁美观的 Vue 3 界面
            - 📝 智能任务分类和标签管理  
            - 🔐 JWT 安全认证
            - 💾 SQLite 本地存储，数据自主可控
            - 🐳 Docker 多架构支持
            - ⚡ 轻量高效，仅需 4MB 内存
            
            ### 🔧 配置
            
            - **JWT密钥**：建议生产环境修改 `JWT_SECRET` 环境变量
            - **数据目录**：`./data/` （可备份整个目录）
            - **端口**：默认 6633，可通过 `PORT` 环境变量修改
            
            ---
            
            **📖 完整文档**：[README.md](https://github.com/${{ github.repository }})  
            **🌐 在线体验**：[https://clear.1wind.cn](https://clear.1wind.cn)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build-frontend, build-binaries]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 🔧 下载 Linux 构建产物（Docker 只需要 Linux）
      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: clear-linux-amd64-asset
          path: ./linux-amd64/

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: clear-linux-arm64-asset
          path: ./linux-arm64/

      - name: Download frontend assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-asset
          path: ./frontend/

      - name: Prepare Docker context
        run: |
          echo "Preparing Docker build context..."
          
          # 解压二进制文件到对应目录
          echo "Extracting AMD64 binary..."
          cd linux-amd64 && tar -xzf clear-linux-amd64.tar.gz && cd ..
          
          echo "Extracting ARM64 binary..."
          cd linux-arm64 && tar -xzf clear-linux-arm64.tar.gz && cd ..
          
          # 解压前端文件
          echo "Extracting frontend assets..."
          mkdir -p web/dist
          cd web/dist && tar -xzf ../../frontend/frontend.tar.gz && cd ../..
          
          # 验证文件
          echo "Verifying extracted files:"
          echo "AMD64 binary:"
          ls -la linux-amd64/
          echo "ARM64 binary:"
          ls -la linux-arm64/
          echo "Frontend files count:"
          ls -1 web/dist/ | wc -l

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:${{ github.event.inputs.tag || github.ref_name }}
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/clear:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/clear:${{ github.event.inputs.tag || github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/clear:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max